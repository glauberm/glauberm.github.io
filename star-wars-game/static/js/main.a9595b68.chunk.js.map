{"version":3,"sources":["services/Api.js","components/Films.js","components/Card.js","components/Lottery.js","services/Utils.js","App.js","serviceWorker.js","index.js"],"names":["Api","urlParam","withBaseUrl","url","fetch","response","ok","json","console","error","status","statusText","_context","t0","Films","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","films","urls","forEach","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","arrayFilms","wrap","prev","next","getRequest","then","result","concat","setState","stop","_x","apply","arguments","bind","react_default","createElement","Fragment","className","length","map","film","key","episode_id","title","Component","Card","planet","_this2","chosenCard","id","name","climate","terrain","surface_water","population","components_Films","Lottery","chosenPlanet","spin","handleCardClick","assertThisInitialized","handleButtonClick","lotteryCards","document","getElementsByClassName","i","classList","add","min","max","count","Math","ceil","floor","random","remove","_this3","onClick","components_Card","action","App","components_Lottery","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9595b68.chunk.js","sourcesContent":["const baseUrl = 'https://swapi.co/api';\n\nclass Api {\n  static async getRequest(urlParam, withBaseUrl = true) {\n    try {\n      const url = (withBaseUrl === true) ?\n        baseUrl + urlParam :\n        urlParam;\n      \n      const response = await fetch(url);\n\n      if (response.ok === true) {\n        return await response.json();\n      } else {\n        console.error(\n          response.url +\n          ' ' + response.status +\n          ': ' + response.statusText\n        );\n        return;\n      }\n    }\n    catch (error) {\n      console.error(error);\n    }\n  }\n}\n\nexport default Api;\n","import React, { Component } from 'react';\nimport Api from '../services/Api';\n\nclass Films extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      films: [],\n    }\n  }\n\n  componentDidMount() {\n    const urls = this.props.urls;\n\n    urls.forEach(async function(url) {\n      let arrayFilms = [];\n      await Api.getRequest(url, false)\n        .then((result) => {\n          arrayFilms = arrayFilms.concat(result);\n        });\n      \n      this.setState({ films: arrayFilms });\n      \n    }.bind(this));\n  }\n\n  render() {\n    const films = this.state.films;\n    \n    return(\n      <React.Fragment>\n        <dt>Films</dt>\n        <div className=\"card__inner-row\">\n          {\n            films.length ?\n              films.map((film) => \n                <dd key={film.episode_id}>{film.title}</dd>\n              ) :\n              <dd>None</dd> \n          }\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Films;\n","import React, { Component } from 'react';\nimport Api from '../services/Api';\nimport Films from './Films';\n\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      planet: null,\n    }\n  }\n\n  componentDidMount() {\n    const chosenCard = this.props.chosenCard;\n\n    Api.getRequest('/planets/' + chosenCard)\n      .then((result) => {\n        this.setState({ planet: result });\n      });\n  }\n\n  render() {\n    const planet = this.state.planet;\n\n    return(\n      <div className=\"card\" id=\"card\">\n        { planet &&\n          <div className=\"card__inner\">\n            <h2 className=\"card__title\">{planet.name}</h2>\n            <dl className=\"card__list\">\n              <div className=\"card__row\">\n                <dt>Climate</dt>\n                <dd>{planet.climate}</dd>\n              </div>\n              <div className=\"card__row\">\n                <dt>Terrain</dt>\n                <dd>{planet.terrain}</dd>\n              </div>\n              <div className=\"card__row\">\n                <dt>Surface water</dt>\n                <dd>{planet.surface_water}</dd>\n              </div>\n              <div className=\"card__row\">\n                <dt>Population</dt>\n                <dd>{planet.population}</dd>\n              </div>\n              <div className=\"card__row\">\n                { planet.population.length &&\n                  <Films urls={planet.films} />\n                }\n              </div>\n            </dl>\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport Api from '../services/Api';\nimport { getRandomIntInclusive } from '../services/Utils';\nimport Card from './Card';\n\nclass Lottery extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chosenPlanet: null,\n      spin: true\n    };\n    this.handleCardClick = this.handleCardClick.bind(this);\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n  }\n\n  handleCardClick() {\n    if (this.state.spin === true) {\n      this.setState({ spin: false });\n      const lotteryCards = document.getElementsByClassName('lottery__card');\n\n      for (let i = 0; i < lotteryCards.length; i++) {\n        if(i === 0) {\n          lotteryCards[i].classList.add('lottery__card--selected');\n        } else {\n          lotteryCards[i].classList.add('lottery__card--stop');\n        }\n      }\n\n      Api.getRequest('/planets/')\n        .then((result) => {\n          this.setState({\n            chosenPlanet: getRandomIntInclusive(1, result.count),\n          });\n        });\n    }\n  }\n\n  handleButtonClick() {\n    if (this.state.spin === false) {\n      this.setState({\n        chosenPlanet: null,\n        spin: true\n      });\n      const lotteryCards = document.getElementsByClassName('lottery__card');\n\n      for (let i = 0; i < lotteryCards.length; i++) {\n        if(i === 0) {\n          lotteryCards[i].classList.remove('lottery__card--selected');\n        } else {\n          lotteryCards[i].classList.remove('lottery__card--stop');\n        }\n      }\n    }\n  }\n\n  render() {\n    const chosenPlanet = this.state.chosenPlanet;\n\n    return (\n      <div className=\"lottery\">\n        <div className=\"lottery__wrapper\">\n          <div className=\"lottery__container\">\n            <div className=\"lottery__card lottery__card--spin\"\n              onClick={() => this.handleCardClick()}\n            >\n              <div className=\"lottery__card-back\"></div>\n              <div className=\"lottery__card-front\">\n                { chosenPlanet &&\n                  <Card chosenCard={chosenPlanet} />\n                }\n              </div>\n            </div>\n            <div className=\"lottery__card lottery__card--spin\">\n              <div className=\"lottery__card-back\"></div>\n            </div>\n            <div className=\"lottery__card lottery__card--spin\">\n              <div className=\"lottery__card-back\"></div>\n            </div>\n          </div>\n        </div>\n        { this.state.spin === false &&\n          <button\n            className=\"button\" title=\"Spin again\"\n            action=\"stop\" onClick={() => this.handleButtonClick()}>\n            Spin again\n          </button>\n        }\n      </div>\n    );\n  }\n}\n\nexport default Lottery;\n","export function getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Lottery from './components/Lottery';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <header className=\"header\">\n          <h1>Galactic Empire's Planetary Lottery</h1>\n        </header>\n        <main className=\"main\">\n          <Lottery />\n        </main>\n        <footer className=\"footer\"></footer>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}